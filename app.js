// app.js

let tg = window.Telegram.WebApp;
tg.expand();

// üëá –í–ê–® –ê–ö–¢–£–ê–õ–¨–ù–´–ô URL –î–õ–Ø GOOGLE SCRIPT (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç)
const GOOGLE_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbyJOoaLJEA8NykMEGmc8fJ45CuiGYeDAimSqddLUh2_GGUPod8otfrXK6t9XyffxZpmbg/exec";

const events = [
  {
    id: 1,
    title: "¬´–ê–±–∞–π¬ª –æ–ø–µ—Ä–∞—Å—ã",
    place: "–°.–°–µ–π—Ñ—É–ª–ª–∏–Ω –∞—Ç—ã–Ω–¥–∞“ì—ã “õ–∞–∑–∞“õ –¥—Ä–∞–º–∞ —Ç–µ–∞—Ç—Ä—ã",
    image: "https://raw.githubusercontent.com/Aibynz/Tiketon/refs/heads/main/image1.jpg"
  },
  {
    id: 2,
    title: "–ï—Ä–ª–∞–Ω –ö”©–∫–µ–µ–≤ –∫–æ–Ω—Ü–µ—Ä—Ç—ñ",
    place: "–û—Ä—Ç–∞–ª—ã“õ –∫–æ–Ω—Ü–µ—Ä—Ç –∑–∞–ª—ã",
    image: "https://raw.githubusercontent.com/Aibynz/Tiketon/refs/heads/main/image2.jpg"
  },
  {
    id: 3,
    title: "¬´“ö—ã–∑ –ñ—ñ–±–µ–∫¬ª —Å–ø–µ–∫—Ç–∞–∫–ª—ñ",
    place: "–ñ–∞—Å—Ç–∞—Ä —Ç–µ–∞—Ç—Ä—ã",
    image: "https://raw.githubusercontent.com/Aibynz/Tiketon/refs/heads/main/image3.jpg"
  }
];

const dateList = (() => {
  const now = new Date();
  const dates = [];
  for (let i = 0; i < 7; i++) {
    const date = new Date(now);
    date.setDate(now.getDate() + i);
    dates.push(date.toISOString().split("T")[0]);
  }
  return dates;
})();

let selectedEvent = null;
let selectedSeats = [];
let selectedDate = "";
let selectedTime = "16:00"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
let bookedSeats = [];

const eventList = document.getElementById("eventList");
const bookingSection = document.getElementById("bookingSection");
const eventTitle = document.getElementById("eventTitle");
const seatTable = document.querySelector("#seatTable tbody");
const confirmBtn = document.getElementById("confirmBtn");
const dateSelect = document.getElementById("dateSelect");
const timeSelect = document.getElementById("timeSelect");
const customerNameInput = document.getElementById("customerName");
const customerPhoneInput = document.getElementById("customerPhone");

events.forEach(ev => {
  const card = document.createElement("div");
  card.className = "bg-white border border-gray-200 rounded-lg shadow hover:shadow-lg transition";
  card.innerHTML = `
    <div class="p-4">
      <h3 class="text-lg font-bold text-blue-800">${ev.title}</h3>
      <p class="text-sm text-gray-600">${ev.place}</p>
      <img src="${ev.image || 'https://via.placeholder.com/150'}" alt="${ev.title}" class="w-full h-auto object-cover rounded mb-3">
      <button class="mt-3 w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
        onclick="selectEvent(${ev.id})">
        –¢–∞“£–¥–∞—É
      </button>
    </div>
  `;
  eventList.appendChild(card);
});

function selectEvent(id) {
  selectedEvent = events.find(e => e.id === id);
  selectedSeats = [];
  bookedSeats = [];
  eventTitle.textContent = selectedEvent.title + " | " + selectedEvent.place;
  bookingSection.classList.remove("hidden");

  dateSelect.innerHTML = "";
  dateList.forEach(dateStr => { // –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    const option = document.createElement("option");
    option.value = dateStr;
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const displayDate = new Date(dateStr).toLocaleDateString('kk-KZ', { day: 'numeric', month: 'long', year: 'numeric' });
    option.textContent = displayDate;
    dateSelect.appendChild(option);
  });
  selectedDate = dateList[0]; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  dateSelect.value = selectedDate;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
  selectedTime = timeSelect.options[0].value; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ <select>
  timeSelect.value = selectedTime;

  fetchBookedSeats();
}

dateSelect.onchange = () => {
  selectedDate = dateSelect.value;
  selectedSeats = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã
  fetchBookedSeats();
};
timeSelect.onchange = () => {
  selectedTime = timeSelect.value;
  selectedSeats = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤—Ä–µ–º–µ–Ω–∏
  fetchBookedSeats();
};

async function fetchBookedSeats() {
  if (!selectedEvent || !selectedDate || !selectedTime) {
    console.warn("fetchBookedSeats: –ù–µ –≤—ã–±—Ä–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ, –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è.");
    drawSeatMap(); // –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –ø—É—Å—Ç—É—é –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ä—Ç—É
    return;
  }

  seatTable.innerHTML = '<tr><td colspan="11" class="p-4 text-center">–û—Ä—ã–Ω–¥–∞—Ä –∂“Ø–∫—Ç–µ–ª—É–¥–µ...</td></tr>';
  
  const urlParams = new URLSearchParams({ // –ò—Å–ø–æ–ª—å–∑—É–µ–º URLSearchParams –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
      action: "getBookedSeats",
      title: selectedEvent.title,
      date: selectedDate,
      time: selectedTime
  });
  const requestUrl = `${GOOGLE_SCRIPT_URL}?${urlParams.toString()}`;
  
  console.log("–ó–ê–ü–†–û–° –ö GOOGLE SCRIPT (fetchBookedSeats):", requestUrl); // <-- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï URL

  try {
    const response = await fetch(requestUrl);
    const responseDataText = await response.text(); // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log("–û—Ç–≤–µ—Ç –æ—Ç Google Script (—Ç–µ–∫—Å—Ç):", responseDataText);

    if (!response.ok) {
        let errorData;
        try {
            errorData = JSON.parse(responseDataText);
        } catch (e) {
            errorData = { error: "Fetch error, could not parse JSON from error response", details: responseDataText };
        }
        console.error("–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ (Google Script) –ø—Ä–∏ fetchBookedSeats:", response.status, errorData);
        alert(`–û—Ä—ã–Ω–¥–∞—Ä —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: ${errorData.error || response.statusText}. –¢–æ–ª—ã“ì—ã—Ä–∞“õ –∫–æ–Ω—Å–æ–ª—å–¥–∞.`);
        bookedSeats = [];
    } else {
        try {
            const data = JSON.parse(responseDataText);
            console.log("–û—Ç–≤–µ—Ç –æ—Ç Google Script (JSON parsed):", data);
            if (data.success === false) { // –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—É—Å–ø–µ—Ö –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞
                 console.error("Google Script –≤–µ—Ä–Ω—É–ª success:false:", data.error, data.details);
                 alert(`–û—Ä—ã–Ω–¥–∞—Ä–¥—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ —Å–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ: ${data.error || '–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ'}.`);
                 bookedSeats = [];
            } else {
                bookedSeats = data.booked || [];
            }
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Google Script:", e, "–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", responseDataText);
            alert("–û—Ä—ã–Ω–¥–∞—Ä —Ç—É—Ä–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ –∂–∞—É–∞–ø —Ñ–æ—Ä–º–∞—Ç—ã “õ–∞—Ç–µ.");
            bookedSeats = [];
        }
    }
  } catch (err) {
    console.error("–û—Ä—ã–Ω–¥–∞—Ä–¥—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ –∂–µ–ª—ñ –Ω–µ–º–µ—Å–µ –±–∞—Å“õ–∞ “õ–∞—Ç–µ:", err);
    alert("–û—Ä—ã–Ω–¥–∞—Ä–¥—ã –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ –∂–µ–ª—ñ “õ–∞—Ç–µ—Å—ñ. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã“£—ã–∑–¥—ã —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑.");
    bookedSeats = [];
  }
  drawSeatMap();
}


function drawSeatMap() {
  seatTable.innerHTML = "";
  for (let row = 1; row <= 10; row++) {
    const tr = document.createElement("tr");
    const rowLabel = document.createElement("td");
    rowLabel.textContent = `${row}-“õ–∞—Ç–∞—Ä`;
    rowLabel.className = "p-1 font-medium bg-gray-100 text-xs sm:text-sm text-center";
    tr.appendChild(rowLabel);

    for (let col = 1; col <= 10; col++) {
      const seatId = `${row}-“õ–∞—Ç–∞—Ä ${col}-–æ—Ä—ã–Ω`;
      const td = document.createElement("td");
      td.textContent = col;
      td.dataset.seatId = seatId;

      let baseClasses = "p-2 border text-xs sm:text-sm text-center ";

      if (bookedSeats.includes(seatId)) {
        td.className = baseClasses + "bg-red-300 text-gray-600 cursor-not-allowed";
        td.title = "–ë“±–ª –æ—Ä—ã–Ω –±–æ—Å –µ–º–µ—Å";
      } else {
        td.className = baseClasses + "cursor-pointer bg-gray-50 hover:bg-green-300";
        td.onclick = () => toggleSeat(td, seatId);
        if (selectedSeats.includes(seatId)) { // –ï—Å–ª–∏ –º–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ, –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ
          td.classList.remove("bg-gray-50", "hover:bg-green-300");
          td.classList.add("bg-green-500", "text-white");
        }
      }
      tr.appendChild(td);
    }
    seatTable.appendChild(tr);
  }
}

function toggleSeat(td, seatId) {
  const index = selectedSeats.indexOf(seatId);
  if (index > -1) {
    selectedSeats.splice(index, 1);
    td.classList.remove("bg-green-500", "text-white");
    td.classList.add("bg-gray-50", "hover:bg-green-300");
  } else {
    selectedSeats.push(seatId);
    td.classList.remove("bg-gray-50", "hover:bg-green-300");
    td.classList.add("bg-green-500", "text-white");
  }
  // console.log("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:", selectedSeats); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç
}

confirmBtn.onclick = async () => {
  const customerName = customerNameInput.value.trim();
  const customerPhone = customerPhoneInput.value.trim();

  if (!selectedEvent) {
    alert("–ê–ª–¥—ã–º–µ–Ω —ñ—Å-—à–∞—Ä–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑.");
    return;
  }
  if (selectedSeats.length === 0) {
    alert("–ö–µ–º—ñ–Ω–¥–µ –±—ñ—Ä –æ—Ä—ã–Ω–¥—ã —Ç–∞“£–¥–∞“£—ã–∑.");
    return;
  }
  if (!customerName) {
    alert("–ê—Ç—ã-–∂”©–Ω—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.");
    customerNameInput.focus();
    return;
  }
  if (!customerPhone) {
    alert("–¢–µ–ª–µ—Ñ–æ–Ω –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.");
    customerPhoneInput.focus();
    return;
  }

  confirmBtn.disabled = true;
  confirmBtn.textContent = "–¢–µ–∫—Å–µ—Ä—É...";

  try {
    const checkUrlParams = new URLSearchParams({ // –ò—Å–ø–æ–ª—å–∑—É–µ–º URLSearchParams
        action: "getBookedSeats",
        title: selectedEvent.title,
        date: selectedDate,
        time: selectedTime
    });
    const checkRequestUrl = `${GOOGLE_SCRIPT_URL}?${checkUrlParams.toString()}`;

    console.log("–ó–ê–ü–†–û–° –ö GOOGLE SCRIPT (confirmBtn check):", checkRequestUrl); // <-- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï URL

    const response = await fetch(checkRequestUrl);
    const responseDataText = await response.text(); // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
    console.log("–û—Ç–≤–µ—Ç –æ—Ç Google Script –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ (—Ç–µ–∫—Å—Ç):", responseDataText);

    if (!response.ok) {
        let errorDataCheck;
        try { errorDataCheck = JSON.parse(responseDataText); }
        catch (e) { errorDataCheck = { error: "Fetch error during confirm, could not parse JSON", details: responseDataText }; }
        console.error("–°–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ (Google Script) –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Å—Ç:", response.status, errorDataCheck);
        alert(`–û—Ä—ã–Ω–¥–∞—Ä–¥—ã —Ç–µ–∫—Å–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ: ${errorDataCheck.error || response.statusText}.`);
        confirmBtn.disabled = false;
        confirmBtn.textContent = "üì© –ë—Ä–æ–Ω–¥–∞—É";
        return;
    }
    
    let currentBookedSeats;
    try {
        const data = JSON.parse(responseDataText);
        if (data.success === false) {
            console.error("Google Script –≤–µ—Ä–Ω—É–ª success:false –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:", data.error, data.details);
            alert(`–û—Ä—ã–Ω–¥–∞—Ä–¥—ã —Ç–µ–∫—Å–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ —Å–µ—Ä–≤–µ—Ä “õ–∞—Ç–µ—Å—ñ: ${data.error || '–ë–µ–ª–≥—ñ—Å—ñ–∑ “õ–∞—Ç–µ'}.`);
            confirmBtn.disabled = false;
            confirmBtn.textContent = "üì© –ë—Ä–æ–Ω–¥–∞—É";
            return;
        }
        currentBookedSeats = data.booked || [];
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Google Script –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:", e, "–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", responseDataText);
        alert("–û—Ä—ã–Ω–¥–∞—Ä–¥—ã —Ç–µ–∫—Å–µ—Ä—É –∫–µ–∑—ñ–Ω–¥–µ –∂–∞—É–∞–ø —Ñ–æ—Ä–º–∞—Ç—ã “õ–∞—Ç–µ.");
        confirmBtn.disabled = false;
        confirmBtn.textContent = "üì© –ë—Ä–æ–Ω–¥–∞—É";
        return;
    }

    const newlyBookedByOthers = selectedSeats.filter(seat => currentBookedSeats.includes(seat));

    if (newlyBookedByOthers.length > 0) {
      // –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–∏–¥–∏—Ç–µ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∑–¥–µ—Å—å
      alert(`–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –∫–µ–ª–µ—Å—ñ –æ—Ä—ã–Ω–¥–∞—Ä –∂–∞“£–∞ “ì–∞–Ω–∞ –±—Ä–æ–Ω–¥–∞–ª–¥—ã: ${newlyBookedByOthers.join(', ')}. –¢–∞–ø—Å—ã—Ä—ã—Å –∂–∞“£–∞—Ä—Ç—ã–ª–∞–¥—ã, –±–∞—Å“õ–∞ –æ—Ä—ã–Ω–¥–∞—Ä–¥—ã —Ç–∞“£–¥–∞“£—ã–∑.`);
      bookedSeats = currentBookedSeats;
      selectedSeats = selectedSeats.filter(seat => !newlyBookedByOthers.includes(seat));
      drawSeatMap();
      confirmBtn.disabled = false;
      confirmBtn.textContent = "üì© –ë—Ä–æ–Ω–¥–∞—É";
      return;
    }

    const dataToSend = {
      event: {
          id: selectedEvent.id,
          title: selectedEvent.title,
          place: selectedEvent.place,
          image: selectedEvent.image
      },
      seats: selectedSeats,
      date: selectedDate,
      time: selectedTime,
      customerName: customerName,
      customerPhone: customerPhone
    };

    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram:", JSON.stringify(dataToSend));
    tg.sendData(JSON.stringify(dataToSend));
    // tg.close(); // –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å WebApp –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

  } catch (err) {
    console.error("–ë—Ä–æ–Ω–¥–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ (–æ–±—â–∏–π catch):", err);
    alert("–ë—Ä–æ–Ω–¥–∞—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–π–ª–∞–Ω—ã—Å—ã“£—ã–∑–¥—ã —Ç–µ–∫—Å–µ—Ä—ñ–ø, “õ–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.");
    confirmBtn.disabled = false;
    confirmBtn.textContent = "üì© –ë—Ä–æ–Ω–¥–∞—É";
  }
};

// –í—ã–∑—ã–≤–∞–µ–º selectEvent –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ —Å–ø–∏—Å–∫–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (events.length > 0) {
  selectEvent(events[0].id);
}
